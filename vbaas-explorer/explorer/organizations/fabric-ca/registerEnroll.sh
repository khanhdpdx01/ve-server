#!/bin/bash

function createOrg1() {
  . organizations/fabric-ca/org1/enrollOrg1AdminAndUser.sh
  . organizations/fabric-ca/org1/generateMSPOrg1.sh
}

function createOrg2() {
  . organizations/fabric-ca/org2/enrollOrg2AdminAndUser.sh
  . organizations/fabric-ca/org2/generateMSPOrg2.sh
}

# function createOrg2() {
#   infoln "Enrolling the CA admin"
#   mkdir -p organizations/peerOrganizations/holder.com/

#   export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/holder.com/

#   set -x
#   fabric-ca-client enroll -u https://admin:adminpw@localhost:8054 --caname ca-holder --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"
#   { set +x; } 2>/dev/null

#   echo 'NodeOUs:
#   Enable: true
#   ClientOUIdentifier:
#     Certificate: cacerts/localhost-8054-ca-holder.pem
#     OrganizationalUnitIdentifier: client
#   PeerOUIdentifier:
#     Certificate: cacerts/localhost-8054-ca-holder.pem
#     OrganizationalUnitIdentifier: peer
#   AdminOUIdentifier:
#     Certificate: cacerts/localhost-8054-ca-holder.pem
#     OrganizationalUnitIdentifier: admin
#   OrdererOUIdentifier:
#     Certificate: cacerts/localhost-8054-ca-holder.pem
#     OrganizationalUnitIdentifier: orderer' > "${PWD}/organizations/peerOrganizations/holder.com/msp/config.yaml"

#   # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

#   # Copy org2's CA cert to org2's /msp/tlscacerts directory (for use in the channel MSP definition)
#   mkdir -p "${PWD}/organizations/peerOrganizations/holder.com/msp/tlscacerts"
#   cp "${PWD}/organizations/fabric-ca/org2/ca-cert.pem" "${PWD}/organizations/peerOrganizations/holder.com/msp/tlscacerts/ca.crt"

#   # Copy org2's CA cert to org2's /tlsca directory (for use by clients)
#   mkdir -p "${PWD}/organizations/peerOrganizations/holder.com/tlsca"
#   cp "${PWD}/organizations/fabric-ca/org2/ca-cert.pem" "${PWD}/organizations/peerOrganizations/holder.com/tlsca/tlsca.holder.com-cert.pem"

#   # Copy org2's CA cert to org2's /ca directory (for use by clients)
#   mkdir -p "${PWD}/organizations/peerOrganizations/holder.com/ca"
#   cp "${PWD}/organizations/fabric-ca/org2/ca-cert.pem" "${PWD}/organizations/peerOrganizations/holder.com/ca/ca.holder.com-cert.pem"

#   infoln "Registering peer0"
#   set -x
#   fabric-ca-client register --caname ca-holder --id.name peer0 --id.secret peer0pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"
#   { set +x; } 2>/dev/null


#   infoln "Registering peer0"
#   set -x
#   fabric-ca-client register --caname ca-holder --id.name peer1 --id.secret peer1pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"
#   { set +x; } 2>/dev/null


#   infoln "Registering user"
#   set -x
#   fabric-ca-client register --caname ca-holder --id.name user1 --id.secret user1pw --id.type client --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"
#   { set +x; } 2>/dev/null

#   infoln "Registering the org admin"
#   set -x
#   fabric-ca-client register --caname ca-holder --id.name org2admin --id.secret org2adminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"
#   { set +x; } 2>/dev/null

#   infoln "Generating the peer0 msp"
#   set -x
#   fabric-ca-client enroll -u https://peer0:peer0pw@localhost:8054 --caname ca-holder -M "${PWD}/organizations/peerOrganizations/holder.com/peers/peer0.holder.com/msp" --csr.hosts peer0.holder.com --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"
#   { set +x; } 2>/dev/null

#   cp "${PWD}/organizations/peerOrganizations/holder.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/holder.com/peers/peer0.holder.com/msp/config.yaml"

#   infoln "Generating the peer1 msp"
#   set -x
#   fabric-ca-client enroll -u https://peer1:peer1pw@localhost:8054 --caname ca-holder -M "${PWD}/organizations/peerOrganizations/holder.com/peers/peer1.holder.com/msp" --csr.hosts peer1.holder.com --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"
#   { set +x; } 2>/dev/null

#   cp "${PWD}/organizations/peerOrganizations/holder.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/holder.com/peers/peer1.holder.com/msp/config.yaml"

#   infoln "Generating the peer0-tls certificates"
#   set -x
#   fabric-ca-client enroll -u https://peer0:peer0pw@localhost:8054 --caname ca-holder -M "${PWD}/organizations/peerOrganizations/holder.com/peers/peer0.holder.com/tls" --enrollment.profile tls --csr.hosts peer0.holder.com --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"
#   { set +x; } 2>/dev/null

#   # Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
#   cp "${PWD}/organizations/peerOrganizations/holder.com/peers/peer0.holder.com/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/holder.com/peers/peer0.holder.com/tls/ca.crt"
#   cp "${PWD}/organizations/peerOrganizations/holder.com/peers/peer0.holder.com/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/holder.com/peers/peer0.holder.com/tls/server.crt"
#   cp "${PWD}/organizations/peerOrganizations/holder.com/peers/peer0.holder.com/tls/keystore/"* "${PWD}/organizations/peerOrganizations/holder.com/peers/peer0.holder.com/tls/server.key"

#   infoln "Generating the peer1-tls certificates"
#   set -x
#   fabric-ca-client enroll -u https://peer1:peer1pw@localhost:8054 --caname ca-holder -M "${PWD}/organizations/peerOrganizations/holder.com/peers/peer1.holder.com/tls" --enrollment.profile tls --csr.hosts peer1.holder.com --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"
#   { set +x; } 2>/dev/null

#   # Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
#   cp "${PWD}/organizations/peerOrganizations/holder.com/peers/peer1.holder.com/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/holder.com/peers/peer1.holder.com/tls/ca.crt"
#   cp "${PWD}/organizations/peerOrganizations/holder.com/peers/peer1.holder.com/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/holder.com/peers/peer1.holder.com/tls/server.crt"
#   cp "${PWD}/organizations/peerOrganizations/holder.com/peers/peer1.holder.com/tls/keystore/"* "${PWD}/organizations/peerOrganizations/holder.com/peers/peer1.holder.com/tls/server.key"


#   infoln "Generating the user msp"
#   set -x
#   fabric-ca-client enroll -u https://user1:user1pw@localhost:8054 --caname ca-holder -M "${PWD}/organizations/peerOrganizations/holder.com/users/User1@holder.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"
#   { set +x; } 2>/dev/null

#   cp "${PWD}/organizations/peerOrganizations/holder.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/holder.com/users/User1@holder.com/msp/config.yaml"

#   infoln "Generating the org admin msp"
#   set -x
#   fabric-ca-client enroll -u https://org2admin:org2adminpw@localhost:8054 --caname ca-holder -M "${PWD}/organizations/peerOrganizations/holder.com/users/Admin@holder.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"
#   { set +x; } 2>/dev/null

#   cp "${PWD}/organizations/peerOrganizations/holder.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/holder.com/users/Admin@holder.com/msp/config.yaml"
# }

function createOrderer() {
  infoln "Enrolling the CA admin"
  mkdir -p organizations/ordererOrganizations

  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/ordererOrganizations

  set -x
  fabric-ca-client enroll -u https://admin:adminpw@localhost:9054 --caname ca-orderer --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  echo 'NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-9054-ca-orderer.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-9054-ca-orderer.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-9054-ca-orderer.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-9054-ca-orderer.pem
    OrganizationalUnitIdentifier: orderer' > "${PWD}/organizations/ordererOrganizations/msp/config.yaml"

  # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

  # Copy orderer org's CA cert to orderer org's /msp/tlscacerts directory (for use in the channel MSP definition)
  mkdir -p "${PWD}/organizations/ordererOrganizations/msp/tlscacerts"
  cp "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/msp/tlscacerts/tlsca.example.com-cert.pem"

  # Copy orderer org's CA cert to orderer org's /tlsca directory (for use by clients)
  mkdir -p "${PWD}/organizations/ordererOrganizations/tlsca"
  cp "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/tlsca/tlsca.example.com-cert.pem"

  infoln "Registering orderer"
  set -x
  fabric-ca-client register --caname ca-orderer --id.name orderer --id.secret ordererpw --id.type orderer --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  infoln "Registering the orderer admin"
  set -x
  fabric-ca-client register --caname ca-orderer --id.name ordererAdmin --id.secret ordererAdminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  infoln "Generating the orderer msp"
  set -x
  fabric-ca-client enroll -u https://orderer:ordererpw@localhost:9054 --caname ca-orderer -M "${PWD}/organizations/ordererOrganizations/orderers/orderer.com/msp" --csr.hosts orderer.com --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  cp "${PWD}/organizations/ordererOrganizations/msp/config.yaml" "${PWD}/organizations/ordererOrganizations/orderers/orderer.com/msp/config.yaml"

  infoln "Generating the orderer-tls certificates"
  set -x
  fabric-ca-client enroll -u https://orderer:ordererpw@localhost:9054 --caname ca-orderer -M "${PWD}/organizations/ordererOrganizations/orderers/orderer.com/tls" --enrollment.profile tls --csr.hosts orderer.com --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  # Copy the tls CA cert, server cert, server keystore to well known file names in the orderer's tls directory that are referenced by orderer startup config
  cp "${PWD}/organizations/ordererOrganizations/orderers/orderer.com/tls/tlscacerts/"* "${PWD}/organizations/ordererOrganizations/orderers/orderer.com/tls/ca.crt"
  cp "${PWD}/organizations/ordererOrganizations/orderers/orderer.com/tls/signcerts/"* "${PWD}/organizations/ordererOrganizations/orderers/orderer.com/tls/server.crt"
  cp "${PWD}/organizations/ordererOrganizations/orderers/orderer.com/tls/keystore/"* "${PWD}/organizations/ordererOrganizations/orderers/orderer.com/tls/server.key"

  # Copy orderer org's CA cert to orderer's /msp/tlscacerts directory (for use in the orderer MSP definition)
  mkdir -p "${PWD}/organizations/ordererOrganizations/orderers/orderer.com/msp/tlscacerts"
  cp "${PWD}/organizations/ordererOrganizations/orderers/orderer.com/tls/tlscacerts/"* "${PWD}/organizations/ordererOrganizations/orderers/orderer.com/msp/tlscacerts/tlsca.example.com-cert.pem"

  infoln "Generating the admin msp"
  set -x
  fabric-ca-client enroll -u https://ordererAdmin:ordererAdminpw@localhost:9054 --caname ca-orderer -M "${PWD}/organizations/ordererOrganizations/users/Admin@example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  cp "${PWD}/organizations/ordererOrganizations/msp/config.yaml" "${PWD}/organizations/ordererOrganizations/users/Admin@example.com/msp/config.yaml"
}
